namespace MikeNakis.Kit;

using MikeNakis.Kit.Extensions;
using MikeNakis.Kit.FileSystem;
using SysCompiler = SysCompiler;

/*
	In the Visual Studio Output Window, if a line starts with a source file pathname followed by a line number in
	parentheses, you can double-click on it, and Visual Studio will switch to that source file, at that line.

	Source file pathnames are generated by the compiler, and we can obtain them via the CallerFilePath attribute, or
	from exception stack traces.

	PEARL: Source file pathnames generated by the compiler are absolute: they start from the drive letter and include
		the kitchen sink. As such, they occupy way too much screen real estate in the Visual Studio	Output Window.

	So, we need to shorten those source file pathnames, by converting them from absolute to relative.

	As it turns out, Visual Studio does also understand relative pathnames, albeit with a caveat.
	
	PEARL: Relative path names in the Visual Studio Output Window must be relative to the directory of the startup
		project, not relative to the directory of the solution! If not, then when you double-click on them either
		nothing	will happen, or Visual Studio will open the file in some bizarre, brain-damaged state, described here:
			Stack Overflow - Visual Studio 17.4.4 debug output: double-clicking solution-relative path
			https://stackoverflow.com/q/75224235/773113

	This class exists to overcome this problem.

	This class exposes a `MakeRelative()` method, which converts full pathnames to startup-project-directory-relative
	pathnames.

	For this to work, every project that can be a startup project (in other words, every project that compiles into an
	executable) should begin by invoking the `Initialize()` method of this class, which will compute the full pathname
	to the startup project directory.

	Note that If this is not done, there is no harm: source file pathnames will just not be	converted to relative, so
	they will be long.
*/
public static class StartupProjectDirectory
{
	static DirectoryPath? startupProjectDirectory;

	public static void Initialize( [SysCompiler.CallerFilePath] string? sourceFilePathName = null )
	{
		FilePath sourceFilePath = FilePath.FromAbsolutePath( sourceFilePathName.OrThrow() );
		DirectoryPath directory = sourceFilePath.Directory;
		if( startupProjectDirectory != null )
		{
			Log.Warn( $"Startup Project Directory Path has already been set to '{startupProjectDirectory}'; an attempt is being made to set it to '{directory}'; ignoring." );
			Assert( false );
			return;
		}
		startupProjectDirectory = directory;
		Log.Info( $"Startup Project Directory Path: {startupProjectDirectory}" );
	}

	public static string MakeRelative( string sourceFilePathName )
	{
		if( startupProjectDirectory == null )
			return sourceFilePathName;
		if( !FileSystemPath.IsAbsolute( sourceFilePathName ) )
			return sourceFilePathName;
		FilePath sourceFilePath = FilePath.FromAbsolutePath( sourceFilePathName );
		return startupProjectDirectory.GetRelativePath( sourceFilePath );
	}
}
